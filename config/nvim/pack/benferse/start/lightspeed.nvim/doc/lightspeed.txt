*lightspeed.txt*      For Neovim version 0.5.0      Last change: 2022 January 12

                    .-.. .. --. .... - ... .--. . . -.. 
                  __   _      __   __                      __
                 / /  (_)__ _/ /  / /____ ___  ___ ___ ___/ /
                / /__/ / _ `/ _ \/ __(_-</ _ \/ -_) -_) _  / 
               /____/_/\_, /_//_/\__/___/ .__/\__/\__/\_,_/  
                      /___/            /_/                   
                    .-.. .. --. .... - ... .--. . . -.. 
                                              
==============================================================================
CONTENTS                                                   *lightspeed-contents*

  Introduction ····································· |lightspeed-introduction|
  Usage ··················································· |lightspeed-usage|
  Configuration ·········································· |lightspeed-config|
  Default mappings ······························|lightspeed-default-mappings|
  Custom mappings ······························· |lightspeed-custom-mappings|
  Highlighting ········································ |lightspeed-highlight|
  Events ················································· |lightspeed-events|

==============================================================================
INTRODUCTION                *lightspeed* *lightspeed.nvim* *lightspeed-introduction*

Lightspeed is a motion plugin for Neovim, that makes it possible to reach any
targets in the visible window area with great efficiency, by entering a
2-character search pattern, and then optionally choosing a "labeled" target
among the subsequent on-screen matches. Multiline versions of the native
f/F/t/T commands are also implemented, as a convenience.

==============================================================================
USAGE                                                         *lightspeed-usage*

                                                 *lightspeed-2-character-search*
Command sequence for 2-character search in Normal mode, with the default
settings:

`s|S char1 (char2|label)? (<space>|<tab>)* label?`

That is,
- invoke in the forward (`s`) or backward (`S`) direction
- enter 1st character of the search pattern (might short-circuit after this,
  if the character is unique in the search direction)
- enter 2nd character of the search pattern (might short-circuit after this,
  if there is only one match), or the label character, if the target is
  shortcutable.
- optionally cycle through the groups of matches that can be labeled at once
- choose a labeled target to jump to (in the current group)

                                              *lightspeed-jump-on-partial-input*
If you enter a character that is the only match in the search direction,
Lightspeed jumps to it directly, without waiting for a second input. To
mitigate accidents, a short timeout is set by default, until the second
character in the pair (and only that) is "swallowed" (see
`jump_on_partial_input_safety_timeout` in |lightspeed-config|).

                                                          *lightspeed-shortcuts*
There can be positions where the assigned label itself is enough to determine
the target you want to jump to (for example when a character is always
followed by a certain other character in the search area). Those you can reach
via typing the label character right after the first input, bypassing the
second one. The label gets a different highlight in these cases (by default,
appears as an "inverse" block of the normal labels).

                                                             *lightspeed-x-mode*
The mnemonic for X-mode could be "extend/exclude". In the forward direction,
the cursor goes to the end of the match; in the backward direction, the cursor
stops just before - in an absolute sense, after - the end of the match (the
equivalent of `T` for two-character search). In Operator-pending mode, the
edge of the operated area always gets an offset of +2 - this means that in the
forward direction the motion becomes |inclusive| (the cursor position will be
included in the operation).

                                                          *lightspeed-eol-match*
The newline character is represented by `<enter>` in search patterns. For
example, `f<enter>` is equivalent to `$`, and will move the cursor to the end
of the line. `s<enter>` will label all EOL positions, including off-screen
ones (labeled as `<{label}` or `{label}>`), providing an easy way to move to
blank lines. Likewise, a character before EOL can be targeted by
`s{char}<enter>` (`\n` in the match is highlighted as `¬` by default).

                                                 *lightspeed-1-character-search*
Lightspeed also overrides the native `f`/`F`/`t`/`T` motions with enhanced
versions that work over multiple lines. In all other respects they behave the
same way as the native ones.

                                                             *lightspeed-repeat*
Repeating in Lightspeed works in a uniform way accross all motions - all of the
following methods (and even combinations of them) are valid options:

                                                     *lightspeed-instant-repeat*
In Normal and Visual mode, the motions can be repeated by pressing the
corresponding trigger key - `s`, `f`, `t` - again. (They continue in the
original direction, whether it was forward or backward.) `S`, `F` and `T`, on
the other hand, always _revert_ the previous repeat. Note that in the case of
`T` (or `X`, if mapped), this results in a different, and presumably more
useful behaviour than what you are used to in clever-f and Sneak: it does not
repeat the search in the reverse direction, but puts the cursor back to its
previous position - _before_ the previous match -, allowing for an easy
correction when you accidentally overshoot your target.

For f/t-search, there is a special, opt-in repeat mode: pressing the _target
character_ can also repeat the motion (`opts.repeat_ft_with_target_char`).

                            *lightspeed-cold-repeat* *lightspeed-backspace-repeat*
Pressing `<backspace>` after invoking any of Lightspeed's motions searches
with the previous input (1- and 2-character searches are saved separately).
Subsequent keystrokes of `<backspace>` move on to the next match (that is, it
invokes "instant-repeat" mode), while `<tab>` reverts (just like `S`/`F`/`T`).

There are dedicated `<Plug>` keys available for the two modes; `;` and `,` are
mapped to f/t-repeat by default (that is, they follow the native behaviour).
If you would like to set `;` and `,` to repeat the last Lightspeed motion
(whether it was s/x or f/t), see |lightspeed-custom-mappings|.

Note that for s/x motions the labels will remain available even after entering
instant-repeat mode.

                                                         *lightspeed-dot-repeat*
You can repeat change and delete operations with the `.` character, if
repeat.vim (https://github.com/tpope/vim-repeat) is installed.

Special cases:
- dot-repeating a jump based on partial input will target the first match of
  the previous search pattern (as if it would have been typed out in its
  entirety)
- dot-repeating a jump via a shortcut-label behaves the same as if we have not
  used the shortcut
- dot-repeating a jump in which group-switching was involved is repeated as
  <backspace>-repeat (the target chosen is not saved, will prompt for input
  again)


Note: <C-o> will ignore the jump if the cursor line has not changed. This is a
      Neovim issue (https://github.com/neovim/neovim/issues/9874), and has
      nothing to do with this plugin.

==============================================================================
CONFIGURATION                                                *lightspeed-config*

Setting an individual option via the `opts` table directly:

`   require'lightspeed'.opts.jump_to_unique_chars = false`

Setting multiple options via the `setup` function: >

    require'lightspeed'.setup { 
        jump_to_unique_chars = false,
        repeat_ft_with_target_char = true,
    }
<
    Note: These will be merged with the current/default settings. (Settings
          not mentioned here are not disturbed.)

Common options~

`ignore_case = false`

    Ignore case in search patterns.

`exit_after_idle_msecs = { labeled = nil, unlabeled = 1000 }`

    Timeout value, in milliseconds, after which the plugin should exit
    unconditionally (`unlabeled` refers to f/t-mode). The feature can be
    disabled by setting the given value to `nil`.

s/x-specific options~

`jump_to_unique_chars = { safety_timeout = 400 }`

    Whether to jump right after the first input, if the target character is
    unique in the search direction. The value can be either `nil`/`false`, or
    a table with the field `safety_timeout`; it sets a timeout value, in
    milliseconds, until the character in the next position is ignored (see
    |lightspeed-jump-on-partial-input|).

`match_only_the_start_of_same_char_seqs = true`

    This can be useful, so that e.g. a separator line will not snatch up all the
    available labels when you want to jump to a `==` or `--` beyond that. Also
    convenient for working with hex color codes.

`substitute_chars = { ['\r'] = '¬' }`

    The keys in this table will be substituted in the highlighted matches by
    the given characters. This way whitespace characters can be made visible,
    and pairs containing them more easily targetable.

`force_beacons_into_match_width = false`

    If turned on, beacons will always appear as `{masked-char}{label}`, not
    sticking out of the match, even if there would be enough space to show the
    label next to it.

`safe_labels` >
    {"s", "f", "n"
     "u", "t"
     "/", "F", "L", "N", "H", "G", "M", "U", "T", "?", "Z"}
<
    When the number of matches does not exceed the number of these "safe"
    labels plus one, the plugin jumps to the first match automatically after
    entering the pattern. Obviously, for this purpose you should choose keys
    that are unlikely to be used right after a jump!
    Leaving the list empty (or setting it to `nil`) effectively disables the
    auto-jump feature.

    Note: Operator-pending mode ignores this, all targets (if multiple found)
          are labeled then (using the `labels` list, if not empty).

`labels` >
    {"s", "f", "n"
     "j", "k", "l", "o", "i", "w", "e", "h", "g"
     "u", "t"
     "m", "v", "c", "a" ".", "z",
     "/", "F", "L", "N", "H", "G", "M", "U", "T", "?", "Z"}
<
    Target labels to be used when there are more matches than the number of
    safe labels plus one.
    Leaving the list empty (or setting it to `nil`) forces auto-jump to always
    be on, except for Operator-pending mode. In this case, do not forget to
    set `cycle_group_fwd_key` to something "safe" too.

Heuristics behind the defaults: 
- At least the first few labels should be the same on the two lists, since
  those become muscle memory, and might be used automatically, a bit like
  [count] values.
- Since the commands invoking the motions are mapped to left-hand keys
  (`s`, `z`, `x`), we tend to prioritize right-hand keys to get a better
  balance for the whole sequence on average.

Note: If you have mapped some keys to `<Plug>Lightspeed_;_sx` and
      `<Plug>Lightspeed_,_sx`, you should not use them as labels too,
      obviously.

`special_keys` >
    { 
      next_match_group = '<space>',
      prev_match_group = '<tab>'
    }
<
    These keys switch to the next/previous group of matches, when there are
    more matches than labels available.

f/t-specific options~

`limit_ft_matches = 4`

    For 1-character search, the next 'n' matches will be highlighted after
    [count]. Highlighting matches can be turned off altogether by setting the
    value to 0 or `nil`.

`repeat_ft_with_target_char = false`

    If turned on, you can repeat f/t motions by pressing the target character
    repeatedly, like `faaa`. Note that in this case you have to `esc` your way
    out if you would like to use the target character for something else right
    after the repeat.
<
==============================================================================
DEFAULT MAPPINGS                                   *lightspeed-default-mappings*

Normal mode~

s{char}{char}              Jump to the first character of {char}{char}
                           in the forward direction.
S{char}{char}              Jump to the first character of {char}{char}
                           in the backward direction.

Visual mode~

s{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the forward
                           direction.
S{char}{char}              Extend visual selection up to and including the
                           first character of {char}{char} in the backward
                           direction.

Operator-pending mode~

{operator}z{char}{char}    Perform {operator} from the cursor up to the first
                           character of {char}{char} in the forward direction.
{operator}Z{char}{char}    Perform {operator} from the cursor up to and
                           including the first character of {char}{char} in
                           the backward direction. (|exclusive| motion: the
                           cursor position is not included without |o_v|.)

{operator}x{char}{char}    Perform {operator} from the cursor up to and
                           including the second character of {char}{char} in
                           the forward direction.
{operator}X{char}{char}    Perform {operator} from the cursor up to the second
                           character of {char}{char} in the backward
                           direction. (|exclusive| motion: the cursor position
                           is not included without |o_v|.)

All modes~

[count]f{char}             To the [count]'th next {char}.
[count]F{char}             To the [count]'th previous {char}.
[count]t{char}             To right before the [count]'th next {char}.
[count]T{char}             To right after the [count]'th previous {char}.

{key}<Backspace>           Repeat with previous input. (1-character and
                           2-character searches are stored separately.)
                           See also |lightspeed-repeat|.

<Esc>                      Exit Lightspeed at any stage cleanly.

2-character search (after entering the full pattern)~

<Space>                    Shift to the next group of labeled matches.
<Tab>                      Shift to the previous group of labeled matches.

1-character search~

;                          Repeat the previous f/t motion in the forward
                           direction, or revert `,`. 
,                          Repeat the previous f/t motion in the backward
                           direction, or revert `;`.
                           See also |lightspeed-repeat|.

==============================================================================
CUSTOM MAPPINGS                                     *lightspeed-custom-mappings*

<Plug> keys are aliases for right hand sides of mappings - in our case, Lua
method calls. If you are not familiar with the concept, see |<Plug>| and
|using-<Plug>|.

Note: Be sure to use `-map`, and not `-noremap`, for <Plug> mappings, as they
      should be used recursively, by design.

Available <Plug> keys for all modes (pattern length, direction,
motion/operation semantics):

`<Plug>Lightspeed_s`  2-character  forward   /-like (0,  exclusive op)
`<Plug>Lightspeed_S`  2-character  backward  ?-like (0,  exclusive op)
`<Plug>Lightspeed_x`  2-character  forward          (+1, inclusive op)
`<Plug>Lightspeed_X`  2-character  backward         (+2, exclusive op)

`<Plug>Lightspeed_f`  1-character  forward   f-like (0,  inclusive op)
`<Plug>Lightspeed_F`  1-character  backward  F-like (0,  exclusive op)
`<Plug>Lightspeed_t`  1-character  forward   t-like (-1, inclusive op)
`<Plug>Lightspeed_T`  1-character  backward  T-like (+1, exclusive op)

Repeat (or revert the opposite key):
`<Plug>Lightspeed_;_sx`
`<Plug>Lightspeed_;_ft`

Repeat in the reverse direction (or revert the opposite key):
`<Plug>Lightspeed_,_sx`
`<Plug>Lightspeed_,_ft`

If you would like to use the f/t repeat keys only for instant repeat, you can
easily do that with help of an expression mapping (|map-<expr>|):
>
    " set up a flag first
    augroup lightspeed_active
    autocmd!
    autocmd User LightspeedFtEnter let g:lightspeed_active = 1
    autocmd User LightspeedFtLeave unlet g:lightspeed_active
    augroup end
    " Note that you can wrap the whole right-hand-side expression in a
    " function if you want.
    nmap <expr> ; exists('g:lightspeed_active') ? "<Plug>Lightspeed_;_ft" : '...'
    nmap <expr> , exists('g:lightspeed_active') ? "<Plug>Lightspeed_,_ft" : '...'
<
Setting `;` and `,` to repeat the last Lightspeed motion (s/x or f/t):
>
    let g:lightspeed_last_motion = ''
    augroup lightspeed_last_motion
    autocmd!
    autocmd User LightspeedSxEnter let g:lightspeed_last_motion = 'sx'
    autocmd User LightspeedFtEnter let g:lightspeed_last_motion = 'ft'
    augroup end
    map <expr> ; g:lightspeed_last_motion == 'sx' ? "<Plug>Lightspeed_;_sx" : "<Plug>Lightspeed_;_ft"
    map <expr> , g:lightspeed_last_motion == 'sx' ? "<Plug>Lightspeed_,_sx" : "<Plug>Lightspeed_,_ft"
<
For 2-character search, the keys for switching between groups of matches can
be set via `opts.special_keys` - see |lightspeed-config|.

                                           *lightspeed-disable-default-mappings*
Lightspeed does not remap any keys for which there is a custom mapping already
defined. If you wish to preserve the _native_ behaviour of some of the keys,
for example f/F/t/T, simply unmap the given keys after the plugin has been
loaded (either `noremap f f` or `silent! unmap f`, for each), or equivalently,
map anything unused to the corresponding <Plug> keys, before the plugin has
been loaded.
Alternatively, the global flag `g:lightspeed_no_default_keymaps` can be set to
some truthy value before sourcing the plugin, to prevent the creation of any
keymaps.

==============================================================================
HIGHLIGHTING                                              *lightspeed-highlight*

Lightspeed uses the following highlight groups that you can configure to your
own liking:

    *LightspeedLabel*
        The character needed to be pressed to jump to the match position,
        after the whole search pattern has been given. It appears once the
        first input has been entered, right after the pair (by default), or on
        top of the second character (when the beacon should be squeezed into
        the 2-column box of the match).

    *LightspeedLabelOverlapped*
        When matches overlap, labels get next to each other - in that case
        they get different highlights, to be more easily distinguishable
        (slightly lighter or darker, depending on the global background).

    *LightspeedLabelDistant*
    *LightspeedLabelDistantOverlapped*
        If the number of matches exceeds the available target labels, the next
        group of labeled targets are shown with a different color. Those can
        be reached by pressing `cycle_group_fwd_key` before the label
        character.
         
    *LightspeedShortcut*
    *LightspeedShortcutOverlapped*
        Labels for positions that can be jumped to right after the first
        input (see |lightspeed-shortcuts|).
        These are highlighted as "inverted" labels by default
        (background/foreground switched).

    *LightspeedMaskedChar*
        The second character of the match, that is shown on top of the first
        one, as a reminder, when the beacon is squeezed into the 2-column box
        of the match.

    *LightspeedGreyWash*
        Foreground color of the "washed out" area for 2-character search.
        Depending on the colorscheme, it might be appropriate to link this to
        the Comment highlight group.

    *LightspeedUnlabeledMatch*
        Matches that can be jumped to automatically, i.e. do not get a label
        - the only ones, and the first ones if `jump_to_first_match` is on.
        (Bold black or white by default, depending on the global background.)

    *LightspeedOneCharMatch*
        Matching characters of f/t search. (Default: |LightspeedShortcut|
        without underline. Setting some background color is recommended, as
        there is no "grey wash" for one-character search mode.)

    *LightspeedUniqueChar*
        Unique characters in the search direction, shown if
        `highlight_unique_chars` is on. Uses the same settings as
        |LightspeedUnlabeledMatch| by default.

    *LightspeedPendingOpArea*
        When jumping based on partial input in operator-pending mode, we do
        not see the operation executed right away, because of the "safety"
        timeout (see |lightspeed-jump-on-partial-input|), therefore we set a
        temporary highlight on the operated area.

    *LightspeedCursor*
        Linked to |hl-Cursor| by default.

In order to preserve your custom settings after changing the colorscheme, you
might want to wrap them in a function, and define an autocommand like below.
(Lightspeed does the same, but with |:hi-default|, so it will not overwrite
yours.) >

    vim.cmd("augroup LightspeedCustomHighlight")
    vim.cmd("autocmd!")
    vim.cmd("autocmd ColorScheme * lua my_lightspeed_highlight_settings()")
    vim.cmd("augroup end")

==============================================================================
EVENTS                                                       *lightspeed-events*

The following |User| events are triggered on entering/exiting Lightspeed
(except for instant-repeat):

*LightspeedEnter* 
*LightspeedLeave* 

The below ones are triggered only for the corresponding motion types:

*LightspeedSxEnter* 
*LightspeedSxLeave* 
*LightspeedFtEnter* 
*LightspeedFtLeave* 

Note: The general ones above are triggered first/last when entering/exiting,
      respectively.

Example: >
    autocmd User LightspeedEnter nohlsearch
    autocmd User LightspeedLeave let &hlsearch=&hlsearch

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
